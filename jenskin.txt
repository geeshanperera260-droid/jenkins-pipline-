pipeline {
  agent any
  options { timestamps(); ansiColor('xterm') }

  // Use the NodeJS plugin (Manage Jenkins → Tools → NodeJS installations → add "node-18")
  tools { nodejs 'node-18' }

  stages {
    stage('Checkout') {
      steps {
        // If your job is "Pipeline from SCM", this works:
        checkout scm
        // Or explicitly: git branch: 'main', url: 'https://github.com/geeshanperera260-droid/jenkins-pipline-.git'
      }
    }

    stage('Verify Node & npm') {
      steps {
        bat 'node -v'
        bat 'npm -v'
      }
    }

    stage('Install Dependencies') {
      steps {
        bat 'npm install'
      }
    }

    stage('Run Tests') {
      steps {
        // Keep the build green even if tests fail (common for this assignment)
        bat 'npm test || exit /b 0'
      }
      post {
        always {
          // JUnit results if your tests produce them (ok to leave; it will just be empty)
          junit allowEmptyResults: true, testResults: '**/junit*.xml'
        }
      }
    }

    stage('Coverage (optional)') {
      steps {
        // Runs only if you added a "coverage" script in package.json; otherwise it won't fail the build
        bat 'npm run coverage || exit /b 0'
      }
      post {
        always {
          // Publish lcov if you generate it (nyc produces coverage/lcov.info)
          recordCoverage(tools: [[parser: 'LCOV', pattern: 'coverage/lcov.info']], sourceFileResolver: sourceFiles('STORE_LAST_BUILD'))
        }
      }
    }

    stage('NPM Audit (Security Scan)') {
      steps {
        // Show CVEs but don’t fail the build
        bat 'npm audit || exit /b 0'
        // For a report file you can archive:
        bat 'npm audit --json > npm-audit.json || exit /b 0'
        archiveArtifacts artifacts: 'npm-audit.json', fingerprint: true, onlyIfSuccessful: false
      }
    }
  }

  post {
    always {
      echo "Build finished with: ${currentBuild.currentResult}"
    }
  }
}
